{"ast":null,"code":"var _jsxFileName = \"/home/lucaswerner/repositories/trybe-projects/sd-03-recipes-app-01/src/components/ShareIcon.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport srcShareIcon from \"../images/shareIcon.svg\";\nimport './ShareIcon.css';\n\nfunction ShareIcon({\n  textToCopy\n}) {\n  const [coping, setCoping] = useState(false);\n  const enableCopy = useCallback(() => {\n    setCoping(true);\n  }, []);\n  const disableCopy = useCallback(() => {\n    setCoping(false);\n  }, []);\n  useEffect(() => {\n    if (coping) {\n      navigator.clipboard.writeText(textToCopy).then(() => console.log('succes copy')).catch(err => console.log(err));\n    }\n  }, [coping, setCoping, textToCopy]);\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"tooltip hidden-button\",\n    onClick: enableCopy,\n    onMouseOut: disableCopy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, coping ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, \"Link copiado!\") : /*#__PURE__*/React.createElement(\"img\", {\n    \"data-testid\": \"share-btn\",\n    src: srcShareIcon,\n    alt: \"click to copy the link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }), coping || /*#__PURE__*/React.createElement(\"span\", {\n    className: \"tooltiptext\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 18\n    }\n  }, \"Copiar Link\"));\n}\n\nShareIcon.propTypes = {\n  textToCopy: PropTypes.string.isRequired\n};\nexport default ShareIcon;","map":{"version":3,"sources":["/home/lucaswerner/repositories/trybe-projects/sd-03-recipes-app-01/src/components/ShareIcon.js"],"names":["React","useState","useCallback","useEffect","PropTypes","ShareIcon","textToCopy","coping","setCoping","enableCopy","disableCopy","navigator","clipboard","writeText","then","console","log","catch","err","srcShareIcon","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAGA,OAAO,iBAAP;;AAEA,SAASC,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAAmC;AACjC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMQ,UAAU,GAAGP,WAAW,CAAC,MAAM;AAAEM,IAAAA,SAAS,CAAC,IAAD,CAAT;AAAkB,GAA3B,EAA6B,EAA7B,CAA9B;AACA,QAAME,WAAW,GAAGR,WAAW,CAAC,MAAM;AAAEM,IAAAA,SAAS,CAAC,KAAD,CAAT;AAAmB,GAA5B,EAA8B,EAA9B,CAA/B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,MAAJ,EAAY;AACVI,MAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BP,UAA9B,EACGQ,IADH,CACQ,MAAMC,OAAO,CAACC,GAAR,CAAY,aAAZ,CADd,EAEGC,KAFH,CAEUC,GAAD,IAASH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAFlB;AAGD;AACF,GANQ,EAMN,CAACX,MAAD,EAASC,SAAT,EAAoBF,UAApB,CANM,CAAT;AAQA,sBACE;AACE,IAAA,SAAS,EAAC,uBADZ;AAEE,IAAA,OAAO,EAAEG,UAFX;AAGE,IAAA,UAAU,EAAEC,WAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGH,MAAM,gBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADG,gBAEH;AAAK,mBAAY,WAAjB;AAA6B,IAAA,GAAG,EAAEY,YAAlC;AAAgD,IAAA,GAAG,EAAC,wBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPN,EASGZ,MAAM,iBAAI;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATb,CADF;AAaD;;AAEDF,SAAS,CAACe,SAAV,GAAsB;AACpBd,EAAAA,UAAU,EAAEF,SAAS,CAACiB,MAAV,CAAiBC;AADT,CAAtB;AAIA,eAAejB,SAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport srcShareIcon from '../images/shareIcon.svg';\nimport './ShareIcon.css';\n\nfunction ShareIcon({ textToCopy }) {\n  const [coping, setCoping] = useState(false);\n  const enableCopy = useCallback(() => { setCoping(true); }, []);\n  const disableCopy = useCallback(() => { setCoping(false); }, []);\n\n  useEffect(() => {\n    if (coping) {\n      navigator.clipboard.writeText(textToCopy)\n        .then(() => console.log('succes copy'))\n        .catch((err) => console.log(err));\n    }\n  }, [coping, setCoping, textToCopy]);\n\n  return (\n    <button\n      className=\"tooltip hidden-button\"\n      onClick={enableCopy}\n      onMouseOut={disableCopy}\n    >\n      {coping\n        ? <p>Link copiado!</p>\n        : <img data-testid=\"share-btn\" src={srcShareIcon} alt=\"click to copy the link\" />\n      }\n      {coping || <span className=\"tooltiptext\">Copiar Link</span>}\n    </button>\n  );\n}\n\nShareIcon.propTypes = {\n  textToCopy: PropTypes.string.isRequired,\n};\n\nexport default ShareIcon;\n"]},"metadata":{},"sourceType":"module"}