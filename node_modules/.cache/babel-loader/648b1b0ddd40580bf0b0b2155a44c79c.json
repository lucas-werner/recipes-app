{"ast":null,"code":"var _jsxFileName = \"/home/lucaswerner/repositories/trybe-projects/sd-03-recipes-app-01/src/components/DetailsCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactPlayer from 'react-player';\nimport { Link } from 'react-router-dom';\nimport Card from './Card';\nimport ShareIcon from './ShareIcon';\nimport FavoriteIcon from './FavoriteIcon';\nimport { getInProgress, doneRecipes } from '../services/APIs/APIlocalStorage';\n\nconst translate = word => word === 'food' ? 'comidas' : 'bebidas';\n\nconst beginRecipeBtn = (id, type) => Boolean(doneRecipes(id)) || /*#__PURE__*/React.createElement(Link, {\n  to: `/${translate(type)}/${id}/in-progress`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"button\", {\n  \"data-testid\": \"start-recipe-btn\",\n  className: \"buttonIniciar\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }\n}, getInProgress(type)[id] ? 'Continuar Receita' : 'Iniciar Receita'));\n\nfunction DetailsCard({\n  eat,\n  type\n}) {\n  const {\n    id,\n    name,\n    srcImage,\n    video,\n    category,\n    ingredients,\n    instructions,\n    isAlcoholic\n  } = eat;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    name: name,\n    srcImage: srcImage,\n    testid: {\n      title: 'recipe-title',\n      img: 'recipe-photo'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ShareIcon, {\n    textToCopy: window.location.href,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FavoriteIcon, {\n    eat: eat,\n    type: translate(type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"recipe-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, isAlcoholic || category), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, ingredients.map(({\n    ingredient,\n    measure\n  }, index) => /*#__PURE__*/React.createElement(\"li\", {\n    \"data-testid\": `${index}-ingredient-name-and-measure`,\n    key: ingredient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, ingredient, \" \", measure))), /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, instructions), video && /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"video\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ReactPlayer, {\n    url: video,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 42\n    }\n  })), beginRecipeBtn(id, type));\n}\n\nDetailsCard.propTypes = {\n  eat: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n    instructions: PropTypes.string.isRequired,\n    origin: PropTypes.string,\n    srcImage: PropTypes.string.isRequired,\n    video: PropTypes.string,\n    source: PropTypes.string,\n    ingredients: PropTypes.arrayOf(PropTypes.shape({\n      ingredient: PropTypes.string.isRequired,\n      measure: PropTypes.string\n    }).isRequired).isRequired,\n    isAlcoholic: PropTypes.string\n  }).isRequired,\n  type: PropTypes.oneOf(['food', 'drink']).isRequired\n};\nDetailsCard.defaultProps = {\n  eat: {\n    source: null,\n    isAlcoholic: null,\n    origin: '',\n    video: ''\n  }\n};\nexport default DetailsCard;","map":{"version":3,"sources":["/home/lucaswerner/repositories/trybe-projects/sd-03-recipes-app-01/src/components/DetailsCard.js"],"names":["React","PropTypes","ReactPlayer","Link","Card","ShareIcon","FavoriteIcon","getInProgress","doneRecipes","translate","word","beginRecipeBtn","id","type","Boolean","DetailsCard","eat","name","srcImage","video","category","ingredients","instructions","isAlcoholic","title","img","window","location","href","map","ingredient","measure","index","propTypes","shape","string","isRequired","origin","source","arrayOf","oneOf","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactPlayer from 'react-player';\nimport { Link } from 'react-router-dom';\n\nimport Card from './Card';\nimport ShareIcon from './ShareIcon';\nimport FavoriteIcon from './FavoriteIcon';\n\nimport { getInProgress, doneRecipes } from '../services/APIs/APIlocalStorage';\n\nconst translate = (word) => (word === 'food' ? 'comidas' : 'bebidas');\n\nconst beginRecipeBtn = (id, type) => (\n    Boolean(doneRecipes(id)) ||\n      <Link to={`/${translate(type)}/${id}/in-progress`}>\n        <button\n          data-testid=\"start-recipe-btn\"\n          className=\"buttonIniciar\"\n        >{getInProgress(type)[id] ? 'Continuar Receita' : 'Iniciar Receita'}</button>\n      </Link>\n  );\n\nfunction DetailsCard({ eat, type }) {\n  const { id, name, srcImage, video, category, ingredients, instructions, isAlcoholic } = eat;\n\n  return (\n    <div>\n      <Card\n        name={name}\n        srcImage={srcImage}\n        testid={{ title: 'recipe-title', img: 'recipe-photo' }}\n      />\n      <ShareIcon textToCopy={window.location.href} />\n      <FavoriteIcon eat={eat} type={translate(type)} />\n      <p data-testid=\"recipe-category\">{isAlcoholic || category}</p>\n      <ul>\n        {ingredients.map(({ ingredient, measure }, index) => (\n          <li data-testid={`${index}-ingredient-name-and-measure`} key={ingredient}>\n            {ingredient} {measure}\n          </li>\n        ))}\n      </ul>\n      <p data-testid=\"instructions\">{instructions}</p>\n      {video && <div data-testid=\"video\"><ReactPlayer url={video} /></div>}\n      {beginRecipeBtn(id, type)}\n    </div>\n  );\n}\n\nDetailsCard.propTypes = {\n  eat: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n    instructions: PropTypes.string.isRequired,\n    origin: PropTypes.string,\n    srcImage: PropTypes.string.isRequired,\n    video: PropTypes.string,\n    source: PropTypes.string,\n    ingredients: PropTypes.arrayOf(\n      PropTypes.shape({\n        ingredient: PropTypes.string.isRequired,\n        measure: PropTypes.string,\n      }).isRequired,\n    ).isRequired,\n    isAlcoholic: PropTypes.string,\n  }).isRequired,\n  type: PropTypes.oneOf(['food', 'drink']).isRequired,\n};\n\nDetailsCard.defaultProps = {\n  eat: { source: null, isAlcoholic: null, origin: '', video: '' },\n};\n\nexport default DetailsCard;\n"]},"metadata":{},"sourceType":"module"}