{"ast":null,"code":"export async function fetchFoodsApi(query) {\n  const response = await fetch(`https://www.themealdb.com/api/json/v1/1/${query}`);\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\nexport async function fetchRecomendations(url) {\n  const response = await fetch(url);\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\nexport const fetchDetailsFood = id => fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`).then(response => response.json().then(json => {\n  if (response.ok) return Promise.resolve(json);\n  return Promise.reject(json);\n}));\nexport const handleFoodsData = ({\n  idMeal,\n  strMeal,\n  strCategory,\n  strInstructions,\n  strArea,\n  strMealThumb,\n  strYoutube,\n  srtArea,\n  ...food\n}) => {\n  const obj = {\n    id: idMeal,\n    name: strMeal,\n    category: strCategory,\n    instructions: strInstructions,\n    origin: strArea,\n    srcImage: strMealThumb,\n    video: strYoutube\n  };\n  const ingredientBase = /^strIngredient(\\d*)$/;\n  obj.ingredients = Object.entries(food).reduce((ing, [key, value]) => {\n    const [, id] = key.match(ingredientBase) || [];\n\n    if (id && value !== '') {\n      return [...ing, {\n        ingredient: value,\n        measure: food[`strMeasure${id}`] || null\n      }];\n    }\n\n    return ing;\n  }, []);\n  return obj;\n};\nexport async function fetchCategoriesApi() {\n  const response = await fetch('https://www.themealdb.com/api/json/v1/1/list.php?c=list');\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\nexport const handleCategoriesData = ({\n  strCategory\n}) => ({\n  category: strCategory\n});","map":{"version":3,"sources":["/home/lucaswerner/repositories/trybe-projects/sd-03-recipes-app-01/src/services/APIs/FOODS_API.js"],"names":["fetchFoodsApi","query","response","fetch","json","ok","Promise","resolve","reject","fetchRecomendations","url","fetchDetailsFood","id","then","handleFoodsData","idMeal","strMeal","strCategory","strInstructions","strArea","strMealThumb","strYoutube","srtArea","food","obj","name","category","instructions","origin","srcImage","video","ingredientBase","ingredients","Object","entries","reduce","ing","key","value","match","ingredient","measure","fetchCategoriesApi","handleCategoriesData"],"mappings":"AAAA,OAAO,eAAeA,aAAf,CAA6BC,KAA7B,EAAoC;AACzC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,2CAA0CF,KAAM,EAAlD,CAA5B;AACA,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOF,QAAQ,CAACG,EAAT,GAAcC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAd,GAAsCE,OAAO,CAACE,MAAR,CAAeJ,IAAf,CAA7C;AACD;AAED,OAAO,eAAeK,mBAAf,CAAmCC,GAAnC,EAAwC;AAC7C,QAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACO,GAAD,CAA5B;AACA,QAAMN,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOF,QAAQ,CAACG,EAAT,GAAcC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAd,GAAsCE,OAAO,CAACE,MAAR,CAAeJ,IAAf,CAA7C;AACD;AAED,OAAO,MAAMO,gBAAgB,GAAIC,EAAD,IAC9BT,KAAK,CAAE,wDAAuDS,EAAG,EAA5D,CAAL,CACGC,IADH,CACSX,QAAD,IAAcA,QAAQ,CAACE,IAAT,GAAgBS,IAAhB,CAAsBT,IAAD,IAAU;AACjD,MAAIF,QAAQ,CAACG,EAAb,EAAiB,OAAOC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;AACjB,SAAOE,OAAO,CAACE,MAAR,CAAeJ,IAAf,CAAP;AACD,CAHmB,CADtB,CADK;AASP,OAAO,MAAMU,eAAe,GAAG,CAAC;AAC9BC,EAAAA,MAD8B;AAE9BC,EAAAA,OAF8B;AAG9BC,EAAAA,WAH8B;AAI9BC,EAAAA,eAJ8B;AAK9BC,EAAAA,OAL8B;AAM9BC,EAAAA,YAN8B;AAO9BC,EAAAA,UAP8B;AAQ9BC,EAAAA,OAR8B;AAS9B,KAAGC;AAT2B,CAAD,KAUzB;AACJ,QAAMC,GAAG,GAAG;AACVZ,IAAAA,EAAE,EAAEG,MADM;AAEVU,IAAAA,IAAI,EAAET,OAFI;AAGVU,IAAAA,QAAQ,EAAET,WAHA;AAIVU,IAAAA,YAAY,EAAET,eAJJ;AAKVU,IAAAA,MAAM,EAAET,OALE;AAMVU,IAAAA,QAAQ,EAAET,YANA;AAOVU,IAAAA,KAAK,EAAET;AAPG,GAAZ;AASA,QAAMU,cAAc,GAAG,sBAAvB;AACAP,EAAAA,GAAG,CAACQ,WAAJ,GAAkBC,MAAM,CAACC,OAAP,CAAeX,IAAf,EAAqBY,MAArB,CAA4B,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMC,KAAN,CAAN,KAAuB;AACnE,UAAM,GAAG1B,EAAH,IAASyB,GAAG,CAACE,KAAJ,CAAUR,cAAV,KAA6B,EAA5C;;AACA,QAAInB,EAAE,IAAI0B,KAAK,KAAK,EAApB,EAAwB;AACtB,aAAO,CAAC,GAAGF,GAAJ,EAAS;AAAEI,QAAAA,UAAU,EAAEF,KAAd;AAAqBG,QAAAA,OAAO,EAAElB,IAAI,CAAE,aAAYX,EAAG,EAAjB,CAAJ,IAA2B;AAAzD,OAAT,CAAP;AACD;;AACD,WAAOwB,GAAP;AACD,GANiB,EAMf,EANe,CAAlB;AAOA,SAAOZ,GAAP;AACD,CA7BM;AA+BP,OAAO,eAAekB,kBAAf,GAAoC;AACzC,QAAMxC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yDAAD,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOF,QAAQ,CAACG,EAAT,GAAcC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAd,GAAsCE,OAAO,CAACE,MAAR,CAAeJ,IAAf,CAA7C;AACD;AAED,OAAO,MAAMuC,oBAAoB,GAAG,CAAC;AAAE1B,EAAAA;AAAF,CAAD,MAAsB;AAAES,EAAAA,QAAQ,EAAET;AAAZ,CAAtB,CAA7B","sourcesContent":["export async function fetchFoodsApi(query) {\n  const response = await fetch(`https://www.themealdb.com/api/json/v1/1/${query}`);\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\n\nexport async function fetchRecomendations(url) {\n  const response = await fetch(url);\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\n\nexport const fetchDetailsFood = (id) => (\n  fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`)\n    .then((response) => response.json().then((json) => {\n      if (response.ok) return Promise.resolve(json);\n      return Promise.reject(json);\n    }),\n  )\n);\n\nexport const handleFoodsData = ({\n  idMeal,\n  strMeal,\n  strCategory,\n  strInstructions,\n  strArea,\n  strMealThumb,\n  strYoutube,\n  srtArea,\n  ...food\n}) => {\n  const obj = {\n    id: idMeal,\n    name: strMeal,\n    category: strCategory,\n    instructions: strInstructions,\n    origin: strArea,\n    srcImage: strMealThumb,\n    video: strYoutube,\n  };\n  const ingredientBase = /^strIngredient(\\d*)$/;\n  obj.ingredients = Object.entries(food).reduce((ing, [key, value]) => {\n    const [, id] = key.match(ingredientBase) || [];\n    if (id && value !== '') {\n      return [...ing, { ingredient: value, measure: food[`strMeasure${id}`] || null }];\n    }\n    return ing;\n  }, []);\n  return obj;\n};\n\nexport async function fetchCategoriesApi() {\n  const response = await fetch('https://www.themealdb.com/api/json/v1/1/list.php?c=list');\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\n\nexport const handleCategoriesData = ({ strCategory }) => ({ category: strCategory });\n"]},"metadata":{},"sourceType":"module"}