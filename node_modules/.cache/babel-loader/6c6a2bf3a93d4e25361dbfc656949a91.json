{"ast":null,"code":"export async function fetchFoodsApi(query) {\n  const response = await fetch(`https://www.themealdb.com/api/json/v1/1/${query}`);\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\nexport const fetchDetailsFood = id => fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`).then(response => response.json().then(json => {\n  if (response.ok) return Promise.resolve(json);\n  return Promise.reject(json);\n}));\nexport const handleFoodsData = ({\n  idMeal,\n  strMeal,\n  strCategory,\n  strInstructions,\n  strArea,\n  strMealThumb,\n  strYoutube,\n  strSource,\n  srtArea,\n  dateModified,\n  ...food\n}) => {\n  const obj = {\n    id: idMeal,\n    name: strMeal,\n    category: strCategory,\n    instructions: strInstructions,\n    origin: strArea,\n    srcImage: strMealThumb,\n    video: strYoutube,\n    source: strSource,\n    doneDate: dateModified\n  };\n  const ingredientBase = /^strIngredient(\\d*)$/;\n  obj.ingredients = Object.entries(food).reduce((ing, [key, value]) => {\n    const [, id] = key.match(ingredientBase) || [];\n\n    if (id && value !== '') {\n      return [...ing, {\n        ingredient: value,\n        measure: food[`strMeasure${id}`] || null\n      }];\n    }\n\n    return ing;\n  }, []);\n  return obj;\n};\nexport async function fetchCategoriesApi() {\n  const response = await fetch('https://www.themealdb.com/api/json/v1/1/list.php?c=list');\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\nexport const handleCategoriesData = ({\n  strCategory\n}) => ({\n  category: strCategory\n});","map":{"version":3,"sources":["/home/lucaswerner/repositories/trybe-projects/sd-03-recipes-app-01/src/services/APIs/FOODS_API.js"],"names":["fetchFoodsApi","query","response","fetch","json","ok","Promise","resolve","reject","fetchDetailsFood","id","then","handleFoodsData","idMeal","strMeal","strCategory","strInstructions","strArea","strMealThumb","strYoutube","strSource","srtArea","dateModified","food","obj","name","category","instructions","origin","srcImage","video","source","doneDate","ingredientBase","ingredients","Object","entries","reduce","ing","key","value","match","ingredient","measure","fetchCategoriesApi","handleCategoriesData"],"mappings":"AAAA,OAAO,eAAeA,aAAf,CAA6BC,KAA7B,EAAoC;AACzC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,2CAA0CF,KAAM,EAAlD,CAA5B;AACA,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOF,QAAQ,CAACG,EAAT,GAAcC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAd,GAAsCE,OAAO,CAACE,MAAR,CAAeJ,IAAf,CAA7C;AACD;AAED,OAAO,MAAMK,gBAAgB,GAAIC,EAAD,IAC9BP,KAAK,CAAE,wDAAuDO,EAAG,EAA5D,CAAL,CACGC,IADH,CACST,QAAD,IAAcA,QAAQ,CAACE,IAAT,GAAgBO,IAAhB,CAAsBP,IAAD,IAAU;AACjD,MAAIF,QAAQ,CAACG,EAAb,EAAiB,OAAOC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;AACjB,SAAOE,OAAO,CAACE,MAAR,CAAeJ,IAAf,CAAP;AACD,CAHmB,CADtB,CADK;AASP,OAAO,MAAMQ,eAAe,GAAG,CAAC;AAC9BC,EAAAA,MAD8B;AAE9BC,EAAAA,OAF8B;AAG9BC,EAAAA,WAH8B;AAI9BC,EAAAA,eAJ8B;AAK9BC,EAAAA,OAL8B;AAM9BC,EAAAA,YAN8B;AAO9BC,EAAAA,UAP8B;AAQ9BC,EAAAA,SAR8B;AAS9BC,EAAAA,OAT8B;AAU9BC,EAAAA,YAV8B;AAW9B,KAAGC;AAX2B,CAAD,KAYzB;AACJ,QAAMC,GAAG,GAAG;AACVd,IAAAA,EAAE,EAAEG,MADM;AAEVY,IAAAA,IAAI,EAAEX,OAFI;AAGVY,IAAAA,QAAQ,EAAEX,WAHA;AAIVY,IAAAA,YAAY,EAAEX,eAJJ;AAKVY,IAAAA,MAAM,EAAEX,OALE;AAMVY,IAAAA,QAAQ,EAAEX,YANA;AAOVY,IAAAA,KAAK,EAAEX,UAPG;AAQVY,IAAAA,MAAM,EAAEX,SARE;AASVY,IAAAA,QAAQ,EAAEV;AATA,GAAZ;AAWA,QAAMW,cAAc,GAAG,sBAAvB;AACAT,EAAAA,GAAG,CAACU,WAAJ,GAAkBC,MAAM,CAACC,OAAP,CAAeb,IAAf,EAAqBc,MAArB,CAA4B,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMC,KAAN,CAAN,KAAuB;AACnE,UAAM,GAAG9B,EAAH,IAAS6B,GAAG,CAACE,KAAJ,CAAUR,cAAV,KAA6B,EAA5C;;AACA,QAAIvB,EAAE,IAAI8B,KAAK,KAAK,EAApB,EAAwB;AACtB,aAAO,CAAC,GAAGF,GAAJ,EAAS;AAAEI,QAAAA,UAAU,EAAEF,KAAd;AAAqBG,QAAAA,OAAO,EAAEpB,IAAI,CAAE,aAAYb,EAAG,EAAjB,CAAJ,IAA2B;AAAzD,OAAT,CAAP;AACD;;AACD,WAAO4B,GAAP;AACD,GANiB,EAMf,EANe,CAAlB;AAOA,SAAOd,GAAP;AACD,CAjCM;AAmCP,OAAO,eAAeoB,kBAAf,GAAoC;AACzC,QAAM1C,QAAQ,GAAG,MAAMC,KAAK,CAAC,yDAAD,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOF,QAAQ,CAACG,EAAT,GAAcC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAd,GAAsCE,OAAO,CAACE,MAAR,CAAeJ,IAAf,CAA7C;AACD;AAED,OAAO,MAAMyC,oBAAoB,GAAG,CAAC;AAAE9B,EAAAA;AAAF,CAAD,MAAsB;AAAEW,EAAAA,QAAQ,EAAEX;AAAZ,CAAtB,CAA7B","sourcesContent":["export async function fetchFoodsApi(query) {\n  const response = await fetch(`https://www.themealdb.com/api/json/v1/1/${query}`);\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\n\nexport const fetchDetailsFood = (id) => (\n  fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`)\n    .then((response) => response.json().then((json) => {\n      if (response.ok) return Promise.resolve(json);\n      return Promise.reject(json);\n    }),\n  )\n);\n\nexport const handleFoodsData = ({\n  idMeal,\n  strMeal,\n  strCategory,\n  strInstructions,\n  strArea,\n  strMealThumb,\n  strYoutube,\n  strSource,\n  srtArea,\n  dateModified,\n  ...food\n}) => {\n  const obj = {\n    id: idMeal,\n    name: strMeal,\n    category: strCategory,\n    instructions: strInstructions,\n    origin: strArea,\n    srcImage: strMealThumb,\n    video: strYoutube,\n    source: strSource,\n    doneDate: dateModified,\n  };\n  const ingredientBase = /^strIngredient(\\d*)$/;\n  obj.ingredients = Object.entries(food).reduce((ing, [key, value]) => {\n    const [, id] = key.match(ingredientBase) || [];\n    if (id && value !== '') {\n      return [...ing, { ingredient: value, measure: food[`strMeasure${id}`] || null }];\n    }\n    return ing;\n  }, []);\n  return obj;\n};\n\nexport async function fetchCategoriesApi() {\n  const response = await fetch('https://www.themealdb.com/api/json/v1/1/list.php?c=list');\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n}\n\nexport const handleCategoriesData = ({ strCategory }) => ({ category: strCategory });\n"]},"metadata":{},"sourceType":"module"}